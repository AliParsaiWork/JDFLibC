<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>Untitled Document</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<style type="text/css">
<!--
  
   H2 {font-family: Arial;
      font-weight: 700;
      font-size: 12pt;}

   H3 {font-family: Tahoma;
      font-weight: 700;
      font-size: 10pt;
      color: black;
     }
   H4 {font-family: "Courier New", Courier, mono;
      font-weight: 100;
      font-size: 9pt;
      color: black;
     }
   H5 {font-family: Arial;
      font-weight: 500;
      font-size: 10pt;
      color: black;
     }
     
--></Style>
</head>

<body>
<h2>How to set a Combined Process Node </h2><br>
<h5>
<strong>Step 1</strong><br>
Set up the root process node - get the JDF document root element, using GetJDFRoot(), initialize it and set attribute Types with a string value, that represents all single processes of the combined process. 
<h4>// The following example illustrates this for a combined RIP node (see Example 7.5)<br><br>
  JDFNode ripNode=GetRoot();<br>
  ripNode.init();<br>
  ripNode.SetTypes(vWString(L&quot;Interpreting Rendering ImageSetting&quot;));<br>
  ripNode.SetEnumType(JDFNode::Type_Combined);<br>
  ripNode.SetStatus(JDFNode::Status_Waiting);</h4>

<h5><br><strong>Step 2</strong><br> 
  Define what input and output resources should have every one of processes that your combined process consists of<br>(for details see JDF Specification (Release 1.2) chapter 6 &ldquo;Processes&rdquo;)
  <br><br>Append to the root node all required resources and optional resources that you need.<br> Use method AppendMatchingResource (const WString&amp; yourResource, EnumProcessUsage processUsage). 
  <br>
  If the resource in the table has no special value in brackets, use ProcessUsage_AnyInput for input resources and ProcessUsage_AnyOutput for output resources.</h5>
<h4>// Example:<br>
  JDFInterpretingParams iP=ripNode.AppendMatchingResource(JDFStrings::elm_InterpretingParams,JDFNode::ProcessUsage_AnyInput);<br>
  JDFRunList inRunList=ripNode.AppendMatchingResource(JDFStrings::elm_RunList,JDFNode::ProcessUsage_AnyInput);<br>
  JDFColorantControl cC=ripNode.AppendMatchingResource(JDFElement::elm_ColorantControl,JDFNode::ProcessUsage_AnyInput);<br>
  JDFRenderingParams rP=ripNode.AppendMatchingResource(JDFElement::elm_RenderingParams,JDFNode::ProcessUsage_AnyInput);<br>
  JDFImageSetterParams iSP=ripNode.AppendMatchingResource(JDFElement::elm_ImageSetterParams,JDFNode::ProcessUsage_AnyInput);<br>
  JDFMedia media=ripNode.AppendMatchingResource(JDFElement::elm_Media,JDFNode::ProcessUsage_AnyInput);<br>
JDFExposedMedia exposedMedia=ripNode.AppendMatchingResource(JDFElement::elm_ExposedMedia,JDFNode::ProcessUsage_AnyOutput);</h4>

  <h5>Note that in this case you should not define the intermediate outputs that become inputs of the following process and thus consume each other to create a process chain, you have to define only the final output.<br>
  <br><br><br>
  <strong>Step 3 (Optional)</strong><br>
  Append to the process the additional generic input resources that are not listed for each process but defined in JDF Specification (Release 1.2) chapter 6.1 &ldquo;Process Template&rdquo;.<br>

<br><br><br>
<strong>Step 4</strong><br>
  For all created resources set the attributes and elements that resource should include. <br>
  <h4>// Example for resource inRunList:<br>
  inRunList.AddRun(L&quot;File1.pdf&quot;,0,1);<br>
    inRunList.AddRun(L&quot;File2.pdf&quot;,0,1);</h4>
</h5>
</body>
</html>
