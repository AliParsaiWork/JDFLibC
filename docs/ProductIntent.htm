<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>Untitled Document</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<style type="text/css">
<!--
  
   H2 {font-family: Arial;
      font-weight: 700;
      font-size: 12pt;}

   H3 {font-family: Tahoma;
      font-weight: 700;
      font-size: 10pt;
      color: black;
     }
   H4 {font-family: "Courier New", Courier, mono;
      font-weight: 100;
      font-size: 9pt;
      color: black;
     }
   H5 {font-family: Arial;
      font-weight: 500;
      font-size: 10pt;
      color: black;
     }
     
--></Style>
</head>

<body>
<h2>How to set a Product Intent Node</h2>
<br><h5>
<strong>Step 1</strong><br>
Set up the root process node - get the JDF document root element, using GetRoot(), initialize it and set attribute Type as a Type_Product. <br>
Set other attributes that you need for your process
</h5>
<h4>//The following example illustrates how to do it (see Example 2)</h4>
<h4>JDFNode productNode=GetRoot();<br>
  productNode.init();<br>
  productNode.SetEnumType(JDFNode::Type_Product);<br>
  productNode.SetStatus(JDFNode::Status_Waiting);<br>
</h4>
<h5>
  <p><br><strong>Step 2</strong><br>
    Define the output resources - components that you are going to have as the result of a defined process.<br>
  (For details see JDF Specification (Release 1.2) chapter 6.3 &ldquo;Product Intent Description&rdquo;)</p>
  <p>To add an output component to the root node use AppendMatchingResource (elm_Component, JDFNode::ProcessUsage_AnyOutput), set ComponentType (normally it is set as ComponentType_FinalProduct) and set other attributes of the Component resource (e.g. SetAmount, SetDescriptiveName). For details see JDF Specification (Release 1.2) chapter 7.2.33 &ldquo;Component&rdquo;</p>
</h5>
<h4>// Example:<br>
  JDFComponent compBrochure=productNode.AppendMatchingResource(JDFStrings::elm_Component,JDFNode::ProcessUsage_AnyOutput);<br>
  compBrochure.SetComponentType(JDFComponent::ComponentType_FinalProduct);<br>
  compBrochure.SetDescriptiveName(&quot;complete 16-page Brochure&quot;);<br>
compBrochure.SetAmount(10000);</h4>
<h5>
  <p><br><strong>Step 3</strong><br>
    Define the input resources of the process - components and intent resources that you need. <br>
  (For details see JDF Specification (Release 1.2) chapter 6.3 &ldquo;Product Intent Description&rdquo;)</p>
  <p>Note that input components of the entire process node are the output components of the partial products.</p>
  <p><br><strong>Step 3.1 (Optional)</strong><br>
  If the product consists of several partial products, add the input components to the productNode in this way</p>
  <p><strong>3.1.1</strong> Add to the productNode the corresponding partial products, using method AddProduct(). </p>
</h5>
<h4>// In the following example we define two partial products for our productNode - cover and insert<br>
  JDFNode prodCover=productNode.AddProduct();<br>
JDFNode prodInsert=productNode.AddProduct();</h4>
<h5>
  <p><strong>3.1.2</strong> For every partial product set appropriate attributes and elements</p>
</h5>
<h4>//Example<br>
  prodCover.SetDescriptiveName(L&quot;Cover&quot;);<br>
prodCover.SetJobPartID(&quot;Part2&quot;);</h4>
<h5>
  <p><strong>3.1.3</strong> For every partial product define its input resources (For details see JDF Specification (Release 1.2) chapter 6.3 &ldquo;Product Intent Description&rdquo;)
  <br>Append to every partial node all resources that you need. For all created resources set the attributes and elements that resource should include. </p>
</h5>
<h4>// Example. Input resources for Cover partial product <br><br>
  JDFLayoutIntent layoutIntent=prodCover.AppendMatchingResource(JDFElement::elm_LayoutIntent,productNode.ProcessUsage_AnyInput);<br>
  layoutIntent.SetNumberUp(JDFXYPair(1,1));<br>
  layoutIntent.SetSides(JDFLayoutIntent::Sides_OneSided);<br>
prodCover.AppendMatchingResource(JDFElement::elm_ColorIntent,productNode.ProcessUsage_AnyInput);</h4>
<h5>
  <p><strong>3.1.4</strong> For every partial product define the output components. <br>
    (For details see JDF Specification (Release 1.2) chapter 6.3 &ldquo;Product Intent Description&rdquo;)<br>
    Use method AppendMatchingResource (JDFStrings::elm_Component, JDFNode::ProcessUsage_AnyOutput, productNode).<br>
  Note that in this case this method has the third parameter that informs where newly created resource resides</p>
</h5>
<h4>// Example. Add a component for the cover that resides in the ResourceLinkPool of productNode<br>
JDFComponent compCover=prodCover.AppendMatchingResource(JDFStrings::elm_Component,JDFNode::ProcessUsage_AnyOutput,productNode);</h4>
<h4>// Set the appropriate attributes and elements of the components<br>
  compCover.SetDescriptiveName(&quot;Cover Component&quot;);<br>
  compCover.SetComponentType(JDFComponent::ComponentType_PartialProduct);<br>
</h4>
<h5>
  <p><strong>3.1.5 </strong>Link the defined partial output components to the root node as input resources,<br>
    using method LinkMatchingResource(resourceName, JDFNode::ProcessUsage_AnyInput)<br>
</p>
  <strong><br>Step 3.2</strong> <br>
Append all Intent input resources that you need for your process. <br>
  Use AppendMatchingResource(intentName,JDFNode::ProcessUsage_AnyInput).
  <p>Note that if input Components are specified, at least one of BindingIntent or InsertingIntent is required</p>
</h5>
<h4>// Example. Append Binding Intent resource to the productNode<br>
  JDFBindingIntent bI=productNode.AppendMatchingResource(JDFStrings::elm_BindingIntent,JDFNode::ProcessUsage_AnyInput);<br>
</h4>
</body>
</html>
