<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>Untitled Document</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<style type="text/css">
<!--
  
   H2 {font-family: Arial;
      font-weight: 700;
      font-size: 12pt;}

   H3 {font-family: Tahoma;
      font-weight: 700;
      font-size: 10pt;
      color: black;
     }
   H4 {font-family: "Courier New", Courier, mono;
      font-weight: 100;
      font-size: 9pt;
      color: black;
     }
   H5 {font-family: Arial;
      font-weight: 500;
      font-size: 10pt;
      color: black;
     }
     
--></Style>
</head>

<body>
<h2>How to set a Process Node </h2>
  <br><h5><strong>Step 1</strong><br>
    Set up the root process node - get the JDF document root element, using GetJDFRoot(), initialize it and set the corresponding Type and Status attribute values. <br>
  <h4>  
  // The following example illustrates this for an Imposition node (see Example 7)<br><br>
  
    JDFNode impositionNode=GetJDFRoot();<br>
    impositionNode.init();<br>
    impositionNode.SetEnumType(JDFNode::Type_Imposition);<br>
    impositionNode.SetStatus(JDFNode::Status_Waiting);
  </h4>

 <h5><br><strong>Step 2</strong><br>
    Define, what input and output resources should have the process, you describe. <br>(For details see JDF Specification (Release 1.2) chapter 6 &ldquo;Processes&rdquo;)<br>
    <br>Append to the root node all required resources and optional resources that you need.<br> Use method AppendMatchingResource (const WString&amp; yourResource, EnumProcessUsage processUsage). 
    <br>If the resource in the table has no special value in brackets, use ProcessUsage_AnyInput for input resources and ProcessUsage_AnyOutput for output resources. <br>
</h5><h4>// Example:<br>
	JDFLayout layout=impositionNode.AppendMatchingResource(JDFStrings::elm_Layout,JDFNode::ProcessUsage_AnyInput);<br>
    JDFRunList docList=impositionNode.AppendMatchingResource(JDFStrings::elm_RunList,JDFNode::ProcessUsage_Document);<br>
    JDFRunList markList=impositionNode.AppendMatchingResource(JDFStrings::elm_RunList,JDFNode::ProcessUsage_Marks);<br>
	JDFRunList outList=impositionNode.AppendMatchingResource(JDFStrings::elm_RunList,JDFNode::ProcessUsage_AnyOutput);</h4>
<h5><br><strong>Step 3 (Optional)</strong><br>
    Append to the process the additional generic input resources that are not listed for each process but defined in JDF Specification (Release 1.2) chapter 6.1 &ldquo;Process Template&rdquo;. <br>
</h5><h4>// Example: <br>   
	JDFApprovalSuccess as=impositionNode.AppendMatchingResource(JDFStrings::elm_ApprovalSuccess,JDFNode::ProcessUsage_AnyInput);<br></h4>

<h5><br><strong>Step 4</strong><br>
  For all created resources set the attributes and elements that resource should include. 
  </h5>
  <h4>//Example: We have the output runlist named outList. First we append a LayoutElement to it,<br>
      JDFLayoutElement outle=outList.AppendLayoutElement();<br><br>
	  // then append a FileSpec to LayoutElement and set some parameters of FileSpec<br>
    JDFFileSpec outfilespec=outle.AppendFileSpec();<br>
  outfilespec.SetURL(&quot;output.pdf&quot;);</h4>
    <br>
  </h5>
</body>
</html>
